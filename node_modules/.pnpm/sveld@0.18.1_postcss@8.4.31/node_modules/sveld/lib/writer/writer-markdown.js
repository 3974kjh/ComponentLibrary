"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var WriterMarkdown_1 = __importDefault(require("./WriterMarkdown"));
var writer_ts_definitions_1 = require("./writer-ts-definitions");
var PROP_TABLE_HEADER = "| Prop name | Required | Kind | Reactive | Type | Default value | Description |\n| :- | :- | :- | :- |\n";
var SLOT_TABLE_HEADER = "| Slot name | Default | Props | Fallback |\n| :- | :- | :- | :- |\n";
var EVENT_TABLE_HEADER = "| Event name | Type | Detail |\n| :- | :- | :- |\n";
var MD_TYPE_UNDEFINED = "--";
function formatPropType(type) {
    if (type === undefined)
        return MD_TYPE_UNDEFINED;
    return "<code>".concat(type.replace(/\|/g, "&#124;"), "</code>");
}
function escapeHtml(text) {
    return text.replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
}
function formatPropValue(value) {
    if (value === undefined)
        return "<code>".concat(value, "</code>");
    return "<code>".concat(value.replace(/`/g, "\\`").replace(/\|/g, "&#124;"), "</code>");
}
function formatPropDescription(description) {
    if (description === undefined || description.trim().length === 0)
        return MD_TYPE_UNDEFINED;
    return escapeHtml(description).replace(/\n/g, "<br />");
}
function formatSlotProps(props) {
    if (props === undefined || props === "{}")
        return MD_TYPE_UNDEFINED;
    return formatPropType((0, writer_ts_definitions_1.formatTsProps)(props).replace(/\n/g, " "));
}
function formatSlotFallback(fallback) {
    if (fallback === undefined)
        return MD_TYPE_UNDEFINED;
    return formatPropType(escapeHtml(fallback).replace(/\n/g, "<br />"));
}
function formatEventDetail(detail) {
    if (detail === undefined)
        return MD_TYPE_UNDEFINED;
    return formatPropType(detail.replace(/\n/g, " "));
}
function writeMarkdown(components, options) {
    return __awaiter(this, void 0, void 0, function () {
        var write, document, keys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    write = (options === null || options === void 0 ? void 0 : options.write) !== false;
                    document = new WriterMarkdown_1["default"]({
                        onAppend: function (type, document) {
                            var _a;
                            (_a = options.onAppend) === null || _a === void 0 ? void 0 : _a.call(null, type, document, components);
                        }
                    });
                    document.append("h1", "Component Index");
                    document.append("h2", "Components").tableOfContents();
                    document.append("divider");
                    keys = Array.from(components.keys()).sort();
                    keys.forEach(function (key) {
                        var component = components.get(key);
                        document.append("h2", "`".concat(component.moduleName, "`"));
                        if (component.typedefs.length > 0) {
                            document.append("h3", "Types").append("raw", "```ts\n".concat((0, writer_ts_definitions_1.getTypeDefs)({
                                typedefs: component.typedefs
                            }), "\n```\n\n"));
                        }
                        document.append("h3", "Props");
                        if (component.props.length > 0) {
                            document.append("raw", PROP_TABLE_HEADER);
                            __spreadArray([], component.props, true).sort(function (a) {
                                if (a.reactive)
                                    return -1;
                                if (a.constant)
                                    return 1;
                                return 0;
                            })
                                .forEach(function (prop) {
                                document.append("raw", "| ".concat(prop.name, " | ").concat(prop.isRequired ? 'Yes' : 'No', " | ").concat("<code>".concat(prop.kind, "</code>"), " | ").concat(prop.reactive ? "Yes" : "No", " | ").concat(formatPropType(prop.type), " | ").concat(formatPropValue(prop.value), " | ").concat(formatPropDescription(prop.description), " |\n"));
                            });
                        }
                        else {
                            document.append("p", "None.");
                        }
                        document.append("h3", "Slots");
                        if (component.slots.length > 0) {
                            document.append("raw", SLOT_TABLE_HEADER);
                            component.slots.forEach(function (slot) {
                                document.append("raw", "| ".concat(slot["default"] ? MD_TYPE_UNDEFINED : slot.name, " | ").concat(slot["default"] ? "Yes" : "No", " | ").concat(formatSlotProps(slot.slot_props), " | ").concat(formatSlotFallback(slot.fallback), " |\n"));
                            });
                        }
                        else {
                            document.append("p", "None.");
                        }
                        document.append("h3", "Events");
                        if (component.events.length > 0) {
                            document.append("raw", EVENT_TABLE_HEADER);
                            component.events.forEach(function (event) {
                                document.append("raw", "| ".concat(event.name, " | ").concat(event.type, " | ").concat(event.type === "dispatched" ? formatEventDetail(event.detail) : MD_TYPE_UNDEFINED, " |\n"));
                            });
                        }
                        else {
                            document.append("p", "None.");
                        }
                    });
                    if (!write) return [3 /*break*/, 2];
                    return [4 /*yield*/, document.write(options.outFile, document.end())];
                case 1:
                    _a.sent();
                    console.log("created \"".concat(options.outFile, "\"."));
                    _a.label = 2;
                case 2: return [2 /*return*/, document.end()];
            }
        });
    });
}
exports["default"] = writeMarkdown;
