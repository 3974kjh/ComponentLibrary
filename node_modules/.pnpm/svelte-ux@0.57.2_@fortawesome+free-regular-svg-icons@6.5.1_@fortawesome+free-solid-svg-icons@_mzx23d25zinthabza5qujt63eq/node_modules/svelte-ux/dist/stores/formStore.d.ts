/// <reference types="svelte" />
import { type Objectish } from 'immer';
import type { Schema } from 'zod';
type FormStoreOptions<T> = {
    schema?: Schema<T>;
};
export default function formStore<T extends Objectish = any>(initialState: T, options?: FormStoreOptions<T>): [{
    subscribe: (this: void, run: import("svelte/store").Subscriber<T>, invalidate?: import("svelte/store").Invalidator<T> | undefined) => import("svelte/store").Unsubscriber;
}, {
    set(newState: T): void;
    /** Apply draft to state after verifying with schema (if available).  Append change to undo stack */
    commit(): boolean;
    /** Revert draft to last committed state */
    revert(): void;
    /** Revert draft and state to initial state */
    revertAll(): void;
    /** Undo last committed change */
    undo(): void;
    /** Refresh `current` draft value (un-proxied) */
    refresh(): void;
    current: import("svelte/store").Writable<T>;
    update(this: void, updater: import("svelte/store").Updater<import("immer").Draft<T>>): void;
    subscribe(this: void, run: import("svelte/store").Subscriber<import("immer").Draft<T>>, invalidate?: import("svelte/store").Invalidator<import("immer").Draft<T>> | undefined): import("svelte/store").Unsubscriber;
}, {
    subscribe: (this: void, run: import("svelte/store").Subscriber<{
        [key: string]: string;
    }>, invalidate?: import("svelte/store").Invalidator<{
        [key: string]: string;
    }> | undefined) => import("svelte/store").Unsubscriber;
}];
export {};
