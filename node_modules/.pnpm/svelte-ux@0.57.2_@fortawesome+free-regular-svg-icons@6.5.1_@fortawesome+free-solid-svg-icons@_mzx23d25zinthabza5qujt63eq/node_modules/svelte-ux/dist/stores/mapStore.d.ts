/// <reference types="svelte" />
/**
 * Store to wrap `Map` to simplify syncing state (set, delete, clear) with Svelte
 */
export default function mapStore<TKey, TValue>(initialValues?: ConstructorParameters<typeof Map<TKey, TValue>>[0]): {
    subscribe: (this: void, run: import("svelte/store").Subscriber<Map<TKey, TValue>>, invalidate?: import("svelte/store").Invalidator<Map<TKey, TValue>> | undefined) => import("svelte/store").Unsubscriber;
    set(key: TKey, value: TValue): void;
    update(key: TKey, updater: (current: TValue | undefined) => TValue): void;
    delete(key: TKey): void;
    clear(): void;
    /**
     * Force a reactive update in case of internal changes to entries
     */
    refresh(): void;
};
