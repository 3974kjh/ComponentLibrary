/// <reference types="svelte" />
import type { Readable } from 'svelte/store';
import type { Page } from '@sveltejs/kit';
import * as Serialize from '../utils/serialize';
type Goto = (url: string | URL, opts?: any) => any;
export type ParamType = 'string' | 'string[]' | 'number' | 'number[]' | 'boolean' | 'date' | 'datetime' | 'json' | 'object';
export type QueryParamProps<Value> = {
    name: string;
    page: Readable<Page>;
    default?: Value;
    paramType?: ParamType;
    goto?: Goto;
};
/**
 * Set a single querystring param
 */
export declare function queryParamStore<Value>(props: QueryParamProps<Value>): {
    subscribe: (this: void, run: import("svelte/store").Subscriber<any>, invalidate?: import("svelte/store").Invalidator<any> | undefined) => import("svelte/store").Unsubscriber;
    set: (value: Value) => void;
    apply: (params: URLSearchParams, newValue: Value) => void;
};
export type QueryParamsProps<Values> = {
    page: Readable<Page>;
    defaults?: Values;
    paramTypes?: {
        [key: string]: ParamType;
    } | ((key: keyof Values) => ParamType);
    goto?: Goto;
};
/**
 * Set all query string params based on object.  Each object property represents a single query param
 */
export declare function queryParamsStore<Values extends {
    [key: string]: any;
}>(props: QueryParamsProps<Values>): {
    subscribe: (this: void, run: import("svelte/store").Subscriber<{
        [x: string]: any;
    }>, invalidate?: import("svelte/store").Invalidator<{
        [x: string]: any;
    }> | undefined) => import("svelte/store").Unsubscriber;
    set: (values: Values) => void;
    createParams: (newValues: Values) => URLSearchParams | undefined;
    createUrl: (newValues: Values) => URL | undefined;
};
export declare function getParamConfig(paramType: ParamType): {
    encode: typeof Serialize.encodeString;
    decode: typeof Serialize.decodeString;
} | {
    encode: typeof Serialize.encodeDelimitedArray;
    decode: typeof Serialize.decodeDelimitedArray;
} | {
    encode: typeof Serialize.encodeNumber;
    decode: typeof Serialize.decodeNumber;
} | {
    encode: (array: (number | null)[] | null | undefined, entrySeparator?: string | undefined) => string | null | undefined;
    decode: typeof Serialize.decodeDelimitedNumericArray;
} | {
    encode: typeof Serialize.encodeBoolean;
    decode: typeof Serialize.decodeBoolean;
} | {
    encode: typeof Serialize.encodeDate;
    decode: typeof Serialize.decodeDate;
} | {
    encode: typeof Serialize.encodeJson;
    decode: typeof Serialize.decodeJson;
} | {
    encode: typeof Serialize.encodeObject;
    decode: typeof Serialize.decodeObject;
};
export {};
