import { setContext, getContext } from 'svelte';
import { writable } from 'svelte/store';
import { merge } from 'lodash-es';
import fetchStore, { initFetchClient } from './fetchStore';
import { parse, stringify } from '../utils/json';
const CONTEXT_KEY = Symbol();
export function initGraphClient(config) {
    setContext(CONTEXT_KEY, config);
    initFetchClient(config.config);
}
export default function graphStore(baseQueryConfig) {
    const globalConfig = getContext(CONTEXT_KEY) ?? { url: '/graphql' };
    const { subscribe, fetch, refresh, clear, fetchConfig } = fetchStore();
    // Save for building derived requests (ex. exports)
    const queryConfigStore = writable(baseQueryConfig);
    function doFetch(queryConfig) {
        const mergedQueryConfig = merge({}, baseQueryConfig, queryConfig);
        queryConfigStore.set(mergedQueryConfig);
        const { query, variables, config } = mergedQueryConfig;
        // https://github.com/apollographql/graphql-tag/issues/144
        const isMutation = query.toLowerCase().includes('mutation');
        const options = merge({
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: stringify({ query, variables }),
        }, globalConfig.config?.options?.(), config?.options?.());
        const mergedFetchConfig = merge({ force: isMutation ? true : undefined }, globalConfig.config, {
            as: async (res) => {
                // Use custom JSON reviver to convert Date strings to Date objects
                // const body = await res.json();
                const text = await res.text();
                const body = parse(text);
                if (body.errors) {
                    throw body.errors;
                }
                else {
                    return body.data;
                }
            },
            options: () => options,
        }, config);
        return fetch(globalConfig.url, mergedFetchConfig);
    }
    return {
        subscribe,
        fetch: doFetch,
        refresh,
        clear,
        queryConfig: queryConfigStore,
        fetchConfig,
    };
}
export function gql(strings, ...args) {
    return strings.map((s, i) => (i === strings.length - 1 ? `${s}` : `${s}${args[i]}`)).join('');
}
