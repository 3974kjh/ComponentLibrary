/// <reference types="svelte" />
/**
 * Store to manage unique values using `Set` with improves ergonomics and better control of updates
 */
export default function uniqueStore<T = string>(initialValues?: T[]): {
    add(value: T): void;
    addEach(values: T[]): void;
    delete(value: T): void;
    toggle(value: T): void;
    set(this: void, value: Set<T>): void;
    update(this: void, updater: import("svelte/store").Updater<Set<T>>): void;
    subscribe(this: void, run: import("svelte/store").Subscriber<Set<T>>, invalidate?: import("svelte/store").Invalidator<Set<T>> | undefined): import("svelte/store").Unsubscriber;
};
