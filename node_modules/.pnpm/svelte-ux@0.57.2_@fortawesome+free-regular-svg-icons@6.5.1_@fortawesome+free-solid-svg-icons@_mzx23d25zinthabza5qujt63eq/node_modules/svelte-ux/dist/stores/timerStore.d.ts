/// <reference types="svelte" />
export type TimerOptions<T> = {
    initial?: T;
    delay?: number;
    disabled?: boolean;
    /** Called on each interval tick.  Returned value is used to update store value, defaulting to current Date */
    onTick?: (current: T | null) => any;
};
/**
 * Subscribable timer store
 */
export default function timerStore<T = any>(options?: TimerOptions<T>): {
    start: () => void;
    stop: () => void;
    reset: () => void;
    isRunning: import("svelte/store").Writable<boolean>;
    getDelay: () => number;
    setDelay: (value: number) => void;
    set(this: void, value: T | null): void;
    update(this: void, updater: import("svelte/store").Updater<T | null>): void;
    subscribe(this: void, run: import("svelte/store").Subscriber<T | null>, invalidate?: import("svelte/store").Invalidator<T | null> | undefined): import("svelte/store").Unsubscriber;
};
