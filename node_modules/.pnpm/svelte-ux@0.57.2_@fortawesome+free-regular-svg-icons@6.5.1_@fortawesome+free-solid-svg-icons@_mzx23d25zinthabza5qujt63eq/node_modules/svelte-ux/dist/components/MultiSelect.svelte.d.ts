import { SvelteComponentTyped } from "svelte";
declare class __sveltets_Render<Option> {
    props(): {
        [x: string]: any;
        options: Option[];
        value?: string[] | undefined;
        indeterminateSelected?: string[] | undefined;
        duration?: number | undefined;
        inlineSearch?: boolean | undefined;
        placeholder?: string | undefined;
        infiniteScroll?: boolean | undefined;
        labelProp?: string | undefined;
        valueProp?: string | undefined;
        cancelButtonProps?: {
            [x: string]: any;
            type?: "reset" | "submit" | "button" | undefined;
            href?: string | undefined;
            target?: string | undefined;
            fullWidth?: boolean | undefined;
            icon?: import("../utils/icons").IconInput;
            iconOnly?: boolean | undefined;
            actions?: import("..").Actions<HTMLAnchorElement | HTMLButtonElement> | undefined;
            loading?: boolean | undefined;
            disabled?: boolean | undefined;
            rounded?: boolean | "full" | undefined;
            variant?: "fill" | "text" | "default" | "outline" | "fill-outline" | "fill-light" | "none" | undefined;
            size?: "sm" | "md" | "lg" | undefined;
            color?: import("..").TailwindColors | "default" | undefined;
            classes?: {
                root?: string | undefined;
                icon?: string | undefined;
                loading?: string | undefined;
            } | undefined;
        } | undefined;
        applyButtonProps?: {
            [x: string]: any;
            type?: "reset" | "submit" | "button" | undefined;
            href?: string | undefined;
            target?: string | undefined;
            fullWidth?: boolean | undefined;
            icon?: import("../utils/icons").IconInput;
            iconOnly?: boolean | undefined;
            actions?: import("..").Actions<HTMLAnchorElement | HTMLButtonElement> | undefined;
            loading?: boolean | undefined;
            disabled?: boolean | undefined;
            rounded?: boolean | "full" | undefined;
            variant?: "fill" | "text" | "default" | "outline" | "fill-outline" | "fill-light" | "none" | undefined;
            size?: "sm" | "md" | "lg" | undefined;
            color?: import("..").TailwindColors | "default" | undefined;
            classes?: {
                root?: string | undefined;
                icon?: string | undefined;
                loading?: string | undefined;
            } | undefined;
        } | undefined;
        classes?: {
            root?: string | undefined;
        } | undefined;
        onApply?: ((ctx: {
            selection: {
                selected: any;
                toggleSelected: (value: any) => void;
                isSelected: (value: any) => boolean;
                toggleAll: () => void;
                isAllSelected: () => boolean;
                isAnySelected: () => boolean;
                clear: () => void;
                reset: () => void;
                all: import("svelte/store").Writable<any[]>;
            };
            indeterminate: Set<string>;
            original: {
                selected: Option[];
                unselected: Option[];
            };
        }) => Promise<void>) | undefined;
        searchText?: string | undefined;
        clear?: (() => void) | undefined;
    };
    events(): {
        change: CustomEvent<{
            selection: {
                selected: any;
                toggleSelected: (value: any) => void;
                isSelected: (value: any) => boolean;
                toggleAll: () => void;
                isAllSelected: () => boolean;
                isAnySelected: () => boolean;
                clear: () => void;
                reset: () => void;
                all: import("svelte/store").Writable<any[]>;
            };
            indeterminate: Set<string>;
            original: {
                selected: Option[];
                unselected: Option[];
            };
        }>;
        cancel: CustomEvent<null>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        option: {
            option: any;
            label: any;
            value: string[];
            checked: any;
            indeterminate: any;
            onChange: () => void;
        };
        actions: {
            searchText: string;
        };
    };
}
export type MultiSelectProps<Option> = ReturnType<__sveltets_Render<Option>['props']>;
export type MultiSelectEvents<Option> = ReturnType<__sveltets_Render<Option>['events']>;
export type MultiSelectSlots<Option> = ReturnType<__sveltets_Render<Option>['slots']>;
export default class MultiSelect<Option> extends SvelteComponentTyped<MultiSelectProps<Option>, MultiSelectEvents<Option>, MultiSelectSlots<Option>> {
    get clear(): () => void;
}
export {};
