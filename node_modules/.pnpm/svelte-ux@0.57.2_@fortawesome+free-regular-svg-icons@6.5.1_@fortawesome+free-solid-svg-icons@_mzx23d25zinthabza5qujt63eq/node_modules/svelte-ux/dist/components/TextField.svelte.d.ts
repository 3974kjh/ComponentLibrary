import { SvelteComponentTyped } from "svelte";
import { type ComponentProps } from 'svelte';
import type { AriaRole } from 'svelte/elements';
import { autoFocus } from '../actions/input';
import type { Actions } from '../actions/multi';
import Input from './Input.svelte';
import { type IconInput } from '../utils/icons';
declare const __propDef: {
    props: {
        [x: string]: any;
        name?: string | undefined;
        label?: string | undefined;
        labelPlacement?: "inset" | "top" | "left" | "float" | undefined;
        value?: (string | number) | {
            [operator: string]: string | number;
        } | undefined;
        type?: "search" | "text" | "email" | "password" | "decimal" | "integer" | "currency" | "percent" | undefined;
        placeholder?: string | undefined;
        error?: string | string[] | boolean | undefined;
        hint?: string | undefined;
        autocomplete?: string | undefined;
        multiline?: boolean | undefined;
        disabled?: boolean | undefined;
        clearable?: boolean | undefined;
        base?: boolean | undefined;
        rounded?: boolean | undefined;
        dense?: boolean | undefined;
        icon?: IconInput;
        iconRight?: IconInput;
        align?: "center" | "left" | "right" | undefined;
        autofocus?: boolean | Parameters<typeof autoFocus>[1];
        actions?: Actions<HTMLInputElement | HTMLTextAreaElement> | undefined;
        operators?: {
            label: string;
            value: string;
        }[] | undefined;
        inputEl?: HTMLInputElement | null | undefined;
        debounceChange?: number | boolean | undefined;
        classes?: {
            root?: string | undefined;
            container?: string | undefined;
            label?: string | undefined;
            input?: string | undefined;
            error?: string | undefined;
            prepend?: string | undefined;
            append?: string | undefined;
        } | undefined;
        mask?: string | undefined;
        replace?: string | undefined;
        accept?: string | RegExp | undefined;
        autocapitalize?: ComponentProps<Input>['autocapitalize'];
        role?: AriaRole | undefined;
    };
    events: {
        click: MouseEvent;
        focus: FocusEvent;
        blur: FocusEvent | CustomEvent<any>;
        keydown: KeyboardEvent;
        keypress: KeyboardEvent;
        clear: CustomEvent<null>;
        change: CustomEvent<{
            value: (string | number) | {
                [operator: string]: string | number;
            };
            inputValue: string | number;
            operator?: string | undefined;
        }>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        prepend: {};
        prefix: {};
        suffix: {};
        append: {};
    };
};
export type TextFieldProps = typeof __propDef.props;
export type TextFieldEvents = typeof __propDef.events;
export type TextFieldSlots = typeof __propDef.slots;
export default class TextField extends SvelteComponentTyped<TextFieldProps, TextFieldEvents, TextFieldSlots> {
}
export {};
