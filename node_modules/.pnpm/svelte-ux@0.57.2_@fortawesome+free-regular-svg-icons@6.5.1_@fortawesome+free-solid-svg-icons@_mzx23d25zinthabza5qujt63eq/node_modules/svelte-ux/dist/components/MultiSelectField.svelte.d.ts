import { SvelteComponentTyped } from "svelte";
import type { Placement } from '@floating-ui/dom';
declare class __sveltets_Render<Option> {
    props(): {
        [x: string]: any;
        options: Option[];
        value?: any[] | undefined;
        indeterminateSelected?: any[] | undefined;
        placement?: Placement | undefined;
        infiniteScroll?: boolean | undefined;
        labelProp?: string | undefined;
        valueProp?: string | undefined;
        label?: string | undefined;
        placeholder?: string | undefined;
        loading?: boolean | undefined;
        disabled?: boolean | undefined;
        icon?: string | null | undefined;
        clearable?: boolean | undefined;
        base?: boolean | undefined;
        rounded?: boolean | undefined;
        dense?: boolean | undefined;
        formatSelected?: ((ctx: {
            value: any[];
            options: Option[];
        }) => string) | undefined;
        classes?: {
            root?: string | undefined;
            menu?: string | undefined;
            field?: string | undefined;
            actions?: string | undefined;
        } | undefined;
        menuProps?: Omit<{
            [x: string]: any;
            options: Option[];
            value?: string[] | undefined;
            indeterminateSelected?: string[] | undefined;
            open?: boolean | undefined;
            duration?: number | undefined;
            placement?: Placement | undefined;
            autoPlacement?: boolean | undefined;
            inlineSearch?: boolean | undefined;
            placeholder?: string | undefined;
            infiniteScroll?: boolean | undefined;
            searchText?: string | undefined;
            labelProp?: string | undefined;
            valueProp?: string | undefined;
            classes?: {
                root?: string | undefined;
                menu?: string | undefined;
            } | undefined;
            menuItemsEl?: HTMLMenuElement | undefined;
        }, "options"> | undefined;
    };
    events(): {
        change: CustomEvent<{
            value: any[];
        }>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        prepend: {
            slot: string;
        };
        append: {};
        option: {
            option: any;
            label: any;
            value: string[];
            checked: any;
            indeterminate: any;
            onChange: () => void;
        };
        actions: {
            slot: string;
        };
    };
}
export type MultiSelectFieldProps<Option> = ReturnType<__sveltets_Render<Option>['props']>;
export type MultiSelectFieldEvents<Option> = ReturnType<__sveltets_Render<Option>['events']>;
export type MultiSelectFieldSlots<Option> = ReturnType<__sveltets_Render<Option>['slots']>;
export default class MultiSelectField<Option> extends SvelteComponentTyped<MultiSelectFieldProps<Option>, MultiSelectFieldEvents<Option>, MultiSelectFieldSlots<Option>> {
}
export {};
