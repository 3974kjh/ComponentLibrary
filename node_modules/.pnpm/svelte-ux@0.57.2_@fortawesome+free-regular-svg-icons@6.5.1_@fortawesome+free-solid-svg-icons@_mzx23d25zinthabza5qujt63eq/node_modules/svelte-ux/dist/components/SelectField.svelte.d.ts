import { SvelteComponentTyped } from "svelte";
import { type ComponentProps } from 'svelte';
import type { Placement } from '@floating-ui/dom';
import Menu from './Menu.svelte';
import TextField from './TextField.svelte';
import type { IconInput } from '../utils/icons';
import type { MenuOption } from '../types/options';
import type { ScrollIntoViewOptions } from '../actions';
declare const __propDef: {
    props: {
        [x: string]: any;
        options?: MenuOption[] | undefined;
        optionText?: ((option: any) => string) | undefined;
        optionValue?: ((option: any) => any) | undefined;
        label?: string | undefined;
        placeholder?: string | undefined;
        loading?: boolean | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        icon?: IconInput;
        toggleIcon?: IconInput;
        closeIcon?: IconInput;
        activeOptionIcon?: boolean | undefined;
        clearable?: boolean | undefined;
        base?: boolean | undefined;
        rounded?: boolean | undefined;
        dense?: boolean | undefined;
        clearSearchOnOpen?: boolean | undefined;
        tabindex?: number | undefined;
        autofocus?: ComponentProps<TextField>['autofocus'];
        fieldActions?: ComponentProps<TextField>['actions'];
        scrollIntoView?: Partial<ScrollIntoViewOptions> | undefined;
        classes?: {
            root?: string | undefined;
            field?: string | ComponentProps<TextField>['classes'];
            options?: string | undefined;
            option?: string | undefined;
            selected?: string | undefined;
            group?: string | undefined;
            empty?: string | undefined;
        } | undefined;
        placement?: Placement | undefined;
        autoPlacement?: boolean | undefined;
        matchWidth?: boolean | undefined;
        resize?: boolean | undefined;
        disableTransition?: boolean | undefined;
        menuProps?: ComponentProps<Menu> | undefined;
        inlineOptions?: boolean | undefined;
        value?: any;
        selected?: any;
        search?: ((text: string) => Promise<void>) | undefined;
        open?: boolean | undefined;
    };
    events: {
        change: CustomEvent<{
            value: any;
            option: any;
        }>;
        inputChange: CustomEvent<string>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        prepend: {
            slot: string;
        };
        append: {};
        option: {
            option: any;
            index: any;
            selected: any;
            value: any;
            highlightIndex: number;
        };
        empty: {
            slot: string;
        };
        actions: {
            hide: (reason?: string) => void;
        };
    };
};
export type SelectFieldProps = typeof __propDef.props;
export type SelectFieldEvents = typeof __propDef.events;
export type SelectFieldSlots = typeof __propDef.slots;
export default class SelectField extends SvelteComponentTyped<SelectFieldProps, SelectFieldEvents, SelectFieldSlots> {
}
export {};
