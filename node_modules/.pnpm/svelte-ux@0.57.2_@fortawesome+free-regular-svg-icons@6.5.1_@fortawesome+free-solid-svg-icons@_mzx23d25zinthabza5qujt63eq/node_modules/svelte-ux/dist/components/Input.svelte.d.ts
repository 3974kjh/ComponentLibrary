import { SvelteComponentTyped } from "svelte";
import type { HTMLInputAttributes, HTMLInputTypeAttribute } from 'svelte/elements';
import type { Actions } from '../actions/multi';
declare const __propDef: {
    props: {
        [x: string]: any;
        value?: string | undefined;
        type?: HTMLInputTypeAttribute | undefined;
        inputmode?: HTMLInputAttributes['inputmode'] | undefined;
        id?: string | undefined;
        actions?: Actions<HTMLInputElement | HTMLTextAreaElement> | undefined;
        inputEl?: HTMLInputElement | null | undefined;
        autocapitalize?: HTMLInputAttributes['autocapitalize'];
        mask?: string | undefined;
        replace?: string | undefined;
        accept?: string | RegExp | undefined;
        placeholder?: string | undefined;
        disabled?: boolean | undefined;
    };
    events: {
        keydown: KeyboardEvent;
        keyup: KeyboardEvent;
        keypress: KeyboardEvent;
        input: Event;
        focus: FocusEvent;
        blur: CustomEvent<any>;
        change: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type InputProps = typeof __propDef.props;
export type InputEvents = typeof __propDef.events;
export type InputSlots = typeof __propDef.slots;
export default class Input extends SvelteComponentTyped<InputProps, InputEvents, InputSlots> {
}
export {};
