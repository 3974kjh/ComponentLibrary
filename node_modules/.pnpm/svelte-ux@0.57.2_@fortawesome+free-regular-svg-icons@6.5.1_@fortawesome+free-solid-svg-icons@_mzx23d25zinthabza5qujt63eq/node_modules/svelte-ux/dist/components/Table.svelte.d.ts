import { SvelteComponentTyped } from "svelte";
import type { ColumnDef } from '../types/table';
import { getCellValue, getCellContent, getCellHeader } from '../utils/table';
declare const __propDef: {
    props: {
        [x: string]: any;
        columns?: ColumnDef[] | undefined;
        data?: any[] | null | undefined;
        orderBy?: string | undefined;
        orderDirection?: 'asc' | 'desc' | undefined;
        classes?: {
            container?: string | undefined;
            wrapper?: string | undefined;
            table?: string | undefined;
            thead?: string | undefined;
            tbody?: string | undefined;
            tr?: string | undefined;
            th?: string | undefined;
            td?: string | undefined;
        } | undefined;
        styles?: {
            container?: string | undefined;
            wrapper?: string | undefined;
            table?: string | undefined;
            thead?: string | undefined;
            tbody?: string | undefined;
            tr?: string | undefined;
            th?: string | undefined;
            td?: string | undefined;
        } | undefined;
    };
    events: {
        headerClick: CustomEvent<any>;
        cellClick: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        headers: {
            headers: {
                classes: {
                    th: string;
                    td: string;
                };
                name: string;
                header?: string | undefined;
                value?: string | ((rowData: any, rowIndex?: number | undefined) => any) | undefined;
                format?: import("..").FormatType | undefined;
                html?: boolean | undefined;
                orderBy?: string | boolean | ((a: any, b: any) => number) | undefined;
                columns?: ColumnDef<any>[] | undefined;
                align?: "center" | "left" | "right" | "justify" | undefined;
                sticky?: {
                    top?: boolean | undefined;
                    bottom?: boolean | undefined;
                    left?: boolean | undefined;
                    right?: boolean | undefined;
                } | undefined;
                style?: {
                    th?: import("../types/table").ResolvePropType<any, string | {
                        [property: string]: string;
                    }>;
                    td?: import("../types/table").ResolvePropType<any, string | {
                        [property: string]: string;
                    }>;
                } | undefined;
                dataBackground?: Partial<import("..").DataBackgroundOptions> | ((context: import("../types/table").ResolveContext<any>) => Partial<import("..").DataBackgroundOptions>) | undefined;
                colSpan?: number | undefined;
                rowSpan?: number | undefined;
                hidden?: boolean | undefined;
            }[][];
            getCellHeader: typeof getCellHeader;
        };
        default: {};
        data: {
            data: any[] | null;
            columns: {
                classes: {
                    th: string;
                    td: string;
                };
                name: string;
                header?: string | undefined;
                value?: string | ((rowData: any, rowIndex?: number | undefined) => any) | undefined;
                format?: import("..").FormatType | undefined;
                html?: boolean | undefined;
                orderBy?: string | boolean | ((a: any, b: any) => number) | undefined;
                columns?: ColumnDef<any>[] | undefined;
                align?: "center" | "left" | "right" | "justify" | undefined;
                sticky?: {
                    top?: boolean | undefined;
                    bottom?: boolean | undefined;
                    left?: boolean | undefined;
                    right?: boolean | undefined;
                } | undefined;
                style?: {
                    th?: import("../types/table").ResolvePropType<any, string | {
                        [property: string]: string;
                    }>;
                    td?: import("../types/table").ResolvePropType<any, string | {
                        [property: string]: string;
                    }>;
                } | undefined;
                dataBackground?: Partial<import("..").DataBackgroundOptions> | ((context: import("../types/table").ResolveContext<any>) => Partial<import("..").DataBackgroundOptions>) | undefined;
                colSpan?: number | undefined;
                rowSpan?: number | undefined;
                hidden?: boolean | undefined;
            }[];
            getCellValue: typeof getCellValue;
            getCellContent: typeof getCellContent;
        };
    };
};
export type TableProps = typeof __propDef.props;
export type TableEvents = typeof __propDef.events;
export type TableSlots = typeof __propDef.slots;
export default class Table extends SvelteComponentTyped<TableProps, TableEvents, TableSlots> {
}
export {};
