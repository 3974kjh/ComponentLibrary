import { SvelteComponentTyped } from "svelte";
import type { Actions } from '../actions/multi';
import type { TailwindColors } from '../types';
import { type IconInput } from '../utils/icons';
declare const __propDef: {
    props: {
        [x: string]: any;
        type?: "reset" | "submit" | "button" | undefined;
        href?: string | undefined;
        target?: string | undefined;
        fullWidth?: boolean | undefined;
        icon?: IconInput;
        iconOnly?: boolean | undefined;
        actions?: Actions<HTMLAnchorElement | HTMLButtonElement> | undefined;
        loading?: boolean | undefined;
        disabled?: boolean | undefined;
        rounded?: boolean | 'full' | undefined;
        variant?: 'default' | 'outline' | 'fill' | 'fill-outline' | 'fill-light' | 'text' | 'none' | undefined;
        size?: 'sm' | 'md' | 'lg' | undefined;
        color?: TailwindColors | 'default' | undefined;
        classes?: {
            root?: string | undefined;
            icon?: string | undefined;
            loading?: string | undefined;
        } | undefined;
    };
    events: {
        click: MouseEvent;
        mouseover: MouseEvent;
        mouseout: MouseEvent;
        focus: FocusEvent;
        blur: FocusEvent;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type ButtonProps = typeof __propDef.props;
export type ButtonEvents = typeof __propDef.events;
export type ButtonSlots = typeof __propDef.slots;
export default class Button extends SvelteComponentTyped<ButtonProps, ButtonEvents, ButtonSlots> {
}
export {};
