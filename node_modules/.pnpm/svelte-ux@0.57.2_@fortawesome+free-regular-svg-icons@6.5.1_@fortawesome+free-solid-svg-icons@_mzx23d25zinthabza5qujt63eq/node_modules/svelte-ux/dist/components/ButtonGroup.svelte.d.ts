import { SvelteComponentTyped } from "svelte";
import { type ComponentProps } from 'svelte';
import type Button from './Button.svelte';
import type { TailwindColors } from '../types';
type ButtonGroupContext = {
    variant: 'default' | 'outline' | 'fill' | 'fill-outline' | 'fill-light' | 'text' | 'none' | undefined;
    size: 'sm' | 'md' | 'lg' | undefined;
    color: TailwindColors | 'default' | undefined;
    rounded: boolean | 'full' | undefined;
};
export declare function setButtonGroup(value: ButtonGroupContext | undefined): void;
export declare function getButtonGroup(): ButtonGroupContext | undefined;
declare const __propDef: {
    props: {
        [x: string]: any;
        variant?: ComponentProps<Button>['variant'];
        size?: ComponentProps<Button>['size'] | undefined;
        color?: ComponentProps<Button>['color'] | undefined;
        rounded?: ComponentProps<Button>['rounded'] | undefined;
        disabled?: boolean | undefined;
    };
    events: {
        keydown: KeyboardEvent;
        keyup: KeyboardEvent;
        keypress: KeyboardEvent;
        click: MouseEvent;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type ButtonGroupProps = typeof __propDef.props;
export type ButtonGroupEvents = typeof __propDef.events;
export type ButtonGroupSlots = typeof __propDef.slots;
export default class ButtonGroup extends SvelteComponentTyped<ButtonGroupProps, ButtonGroupEvents, ButtonGroupSlots> {
}
export {};
