import { SvelteComponentTyped } from "svelte";
import type { Placement } from '@floating-ui/dom';
declare class __sveltets_Render<Option> {
    props(): {
        [x: string]: any;
        options: Option[];
        value?: string[] | undefined;
        indeterminateSelected?: string[] | undefined;
        open?: boolean | undefined;
        duration?: number | undefined;
        placement?: Placement | undefined;
        autoPlacement?: boolean | undefined;
        inlineSearch?: boolean | undefined;
        placeholder?: string | undefined;
        infiniteScroll?: boolean | undefined;
        searchText?: string | undefined;
        labelProp?: string | undefined;
        valueProp?: string | undefined;
        classes?: {
            root?: string | undefined;
            menu?: string | undefined;
        } | undefined;
        menuItemsEl?: HTMLMenuElement | undefined;
    };
    events(): {
        close: CustomEvent<any>;
        cancel: CustomEvent<null>;
        change: CustomEvent<{
            selection: {
                selected: any;
                toggleSelected: (value: any) => void;
                isSelected: (value: any) => boolean;
                toggleAll: () => void;
                isAllSelected: () => boolean;
                isAnySelected: () => boolean;
                clear: () => void;
                reset: () => void;
                all: import("svelte/store").Writable<any[]>;
            };
            indeterminate: Set<string>;
            original: {
                selected: unknown[];
                unselected: unknown[];
            };
        }>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        option: {
            option: any;
            label: any;
            value: string[];
            checked: any;
            indeterminate: any;
            onChange: () => void;
        };
        actions: {
            slot: string;
        };
    };
}
export type MultiSelectMenuProps<Option> = ReturnType<__sveltets_Render<Option>['props']>;
export type MultiSelectMenuEvents<Option> = ReturnType<__sveltets_Render<Option>['events']>;
export type MultiSelectMenuSlots<Option> = ReturnType<__sveltets_Render<Option>['slots']>;
export default class MultiSelectMenu<Option> extends SvelteComponentTyped<MultiSelectMenuProps<Option>, MultiSelectMenuEvents<Option>, MultiSelectMenuSlots<Option>> {
}
export {};
